from keras.datasets import mnist
from keras.utils import normalize
from keras.preprocessing.image import ImageDataGenerator

import os, sys

sys.path.insert(1, os.path.join(sys.path[0], '../../'))

from utils import keras_show_random_predictions as show_predictions, show_image_and_label
from utils import evaluate_model, predict
from keras_implementations.cnn_mnist.models import cnn_model, fc_model

# Hyperparams
LEARNING_RATE = 0.0001
EPOCHS = 5
BATCH_SIZE = 32

# Settings
TRAINING = True
AUGMENT = True
SAVE_MODEL = True
USE_CNN = True
SHOW_WRONGS = True

VERBOSE = 1

# Constants
MODELS_BASE_DIR = "weights/"
MODEL_NAME = 'mnist_model' + ('_cnn' if USE_CNN else '_full')
EXTENSION = '.h5'


def train_model(model, train_data, train_labels, val_data, batch_size, epochs, augment, save=True, tbv=0):
    # Fit the model according to params
    if not augment:
        model.fit(train_data, train_labels, batch_size=batch_size, epochs=epochs, verbose=tbv,
                  validation_data=val_data)
    else:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            zca_epsilon=1e-06,  # epsilon for ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            # randomly shift images horizontally (fraction of total width)
            width_shift_range=0.1,
            # randomly shift images vertically (fraction of total height)
            height_shift_range=0.1,
            shear_range=0.1,  # set range for random shear
            zoom_range=0.1,  # set range for random zoom
            channel_shift_range=0.,  # set range for random channel shifts
            # set mode for filling points outside the input boundaries
            fill_mode='nearest',
            cval=0.,  # value used for fill_mode = "constant"
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False,  # randomly flip images
            # set rescaling factor (applied before any other transformation)
            rescale=None,
            # set function that will be applied on each input
            preprocessing_function=None,
            # image data format, either "channels_first" or "channels_last"
            data_format=None,
            # fraction of images reserved for validation (strictly between 0 and 1)
            validation_split=0.0)

        # Compute quantities required for feature-wise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(train_data)

        # Fit the model on the batches generated by datagen.flow().
        model.fit_generator(datagen.flow(train_data, train_labels,
                                         batch_size=batch_size),
                            epochs=epochs,
                            validation_data=val_data,
                            workers=4)


    if save:
        model.save_weights(MODELS_BASE_DIR + MODEL_NAME + EXTENSION)


def main():
    # Load data
    # Data are array of np arrays with pixel intensity from 0-255 in one channel, as the data is greyscale
    # Labels is an array containing the label as an int on the associated data index
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    # Show an image to verify that the data is loaded and understood correctly
    # show_image_and_label(x_train[0], y_train[0])
    # show_image_and_label(x_test[0], y_test[0])

    # Preprocess data to fit their network
    if USE_CNN:
        x_train = x_train.reshape([-1, 28, 28, 1])
        x_test = x_test.reshape([-1, 28, 28, 1])
    else:
        x_train = normalize(x_train)
        x_test = normalize(x_test)

    # Import the model from the models defined in 'models.py'
    model = cnn_model(lr=LEARNING_RATE, shape=x_train.shape[1:]) if USE_CNN else fc_model(lr=LEARNING_RATE)
    # If we are training the model, then train the model
    if TRAINING:
        train_model(model, x_train, y_train, (x_test, y_test), batch_size=BATCH_SIZE, epochs=EPOCHS, augment=AUGMENT,
                    tbv=VERBOSE, save=SAVE_MODEL)
        # If not, do a prediction; Either a random, or only show the wrongly predicted ones
        else:
        print("Loading model:", MODEL_NAME)
        model.load_weights(MODELS_BASE_DIR + MODEL_NAME + EXTENSION)
        print("Model loaded")

        evaluate_model(model, x_test, y_test)
    prediction = predict(model, x_test)

    show_predictions(x_test, y_test, prediction, [28, 28], wrong=SHOW_WRONGS)


if __name__ == '__main__':
    main()
